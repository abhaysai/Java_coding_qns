  QN:1
    Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.
      Example 1:
        Input: [3,0,1]  Output: 2
        
  ANS:
  class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<n;i++){
            sum=sum+nums[i];
        }
        int k=n*(n+1)/2;
        return k-sum;
       }
      }
      
      
  QN:2
      Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.
        Example:
            Input: [0,1,0,3,12]   Output: [1,3,12,0,0]
            
  ANS:
  class Solution {
    public void moveZeroes(int[] nums) {
        int k=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0)
            {
                nums[k]=nums[i];
                k++;
            }
        }
        while(k<nums.length)
        {
            nums[k]=0;
            k++;
        }
      
    }
}

    QN :3
    Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
          Example:
                  Input:
                       nums1 = [1,2,3,0,0,0], m = 3
                        nums2 = [2,5,6],       n = 3
                        Output: [1,2,2,3,5,6]
    ANS:
    class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int last=m+n-1;
        m--; n--;
        while(m>=0 && n>=0){
            if(nums1[m]>=nums2[n]){
                nums1[last--]=nums1[m--];
            }else{
                nums1[last--]=nums2[n--];
            }
        }
        while(n>=0){
            nums1[last--]=nums2[n--];
        }
    }
}
